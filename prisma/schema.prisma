generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id String @id @default(cuid())

  name      String
  imageUrl  String @db.Text
  latitude  Float
  longitude Float
  zoom      Float

  islands Island[]
  states  State[]
  cities  City[]
  places  Place[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("countries")
}

model Island {
  id String @id @default(cuid())

  name      String
  imageUrl  String @db.Text
  latitude  Float
  longitude Float
  zoom      Float
  slug      String @unique

  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  states    State[]
  cities    City[]
  places    Place[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("islands")
}

model State {
  id String @id @default(cuid())

  name      String
  imageUrl  String @db.Text
  latitude  Float
  longitude Float
  zoom      Float

  island    Island? @relation(fields: [islandId], references: [id])
  islandId  String?
  countryId String
  country   Country @relation(fields: [countryId], references: [id])
  cities    City[]
  places    Place[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("states")
}

model City {
  id String @id @default(cuid())

  name      String
  imageUrl  String @db.Text
  latitude  Float
  longitude Float
  zoom      Float

  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  state     State   @relation(fields: [stateId], references: [id])
  stateId   String
  Island    Island? @relation(fields: [islandId], references: [id])
  islandId  String?
  places    Place[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("cities")
}

model Category {
  id String @id @default(cuid())

  slug       String  @unique
  name       String
  isFeatured Boolean @default(false)
  position   Int?

  places Place[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("categories")
}

model Place {
  id String @id @default(cuid())

  title       String
  slug        String  @unique
  description String  @db.Text
  imageUrl    String  @db.Text
  latitude    Float
  longitude   Float
  zoom        Float
  address     String  @db.Text
  isFeatured  Boolean @default(false)
  position    Int?

  country   Country      @relation(fields: [countryId], references: [id])
  countryId String
  state     State        @relation(fields: [stateId], references: [id])
  stateId   String
  city      City         @relation(fields: [cityId], references: [id])
  cityId    String
  island    Island?      @relation(fields: [islandId], references: [id])
  islandId  String?
  images    PlaceImage[]

  categories Category[]
  savedPlace SavedPlace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([isFeatured, countryId, stateId, cityId])
  @@map("places")
}

model PlaceImage {
  id String @id @default(cuid())

  url         String @db.Text
  title       String
  description String @db.Text

  place   Place  @relation(fields: [placeId], references: [id])
  placeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("placeImages")
}

model User {
  id String @id @default(cuid())

  username  String @unique
  email     String @unique
  firstName String
  lastName  String

  password Password?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  savedPlace SavedPlace[]

  @@map("users")
}

model Password {
  id String @id @default(cuid())

  hash String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("passwords")
}

model SavedPlace {
  id String @id @default(cuid())

  place   Place?  @relation(fields: [placeId], references: [id])
  placeId String?
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("savedPlace")
}
